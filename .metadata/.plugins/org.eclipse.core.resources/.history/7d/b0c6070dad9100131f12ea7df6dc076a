/* 
 * Sensor detection code based on:
 * http://stackoverflow.com/a/1016941/555544
 */

package com.usc.ss12.falldetectionapp;

import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Build;
import android.os.Bundle;
import android.view.Display;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends Activity implements SensorEventListener {

	private Timer checkImmobile = new Timer();
	private TimerTask ok;

    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    
    private final int MAX_RECORDS = 50;
    private final int NUM_ACCEL_THRESHOLD = 4;
    private final double DIFF_THRESHOLD = 4.5;
    
    private int currRecordInd;
    private int accel_count; // fall occurs if 
    private boolean cycle;
    
    private float[] accel_data;
    private float[] accel_diff;
    
    private boolean isAYOActive;
    
    private Button buttonSettings;
    private TextView titleSettings;
    
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        titleSettings = (TextView) findViewById(R.id.textFallDetectionStatus);
        titleSettings.setBackground(getResources().getDrawable(R.drawable.title));
        
        buttonSettings = (Button) findViewById(R.id.buttonSettings);
        buttonSettings.setBackground(getResources().getDrawable(R.drawable.settingsc));

        isAYOActive = false;
        mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    }
    
    private Drawable resize(Drawable image, int paramX, int paramY) {
        Bitmap b = ((BitmapDrawable)image).getBitmap();
        Bitmap bitmapResized = Bitmap.createScaledBitmap(b, paramX, paramY, false);
        return new BitmapDrawable(getResources(), bitmapResized);
    }

    protected void onResume() {
        super.onResume();
        
        mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_GAME);
        isAYOActive = false;
        
        TextView tv = (TextView) findViewById(R.id.accelerometer_values);
        tv.setText("");
		
		currRecordInd = 0;
	    accel_count = 0;
	    cycle = false;
	    
	    accel_data = new float[MAX_RECORDS];
	    accel_diff = new float[MAX_RECORDS];
    }

    protected void onPause() {
        super.onPause();
    }

    public void onAccuracyChanged(Sensor sensor, int accuracy) {
    	// leave this method empty, don't delete (required for implementing interface)
    }

    public void onSensorChanged(SensorEvent event) {
    	
		if (event.sensor.getType() != Sensor.TYPE_ACCELEROMETER)
			return;
		
		float mSensorX = event.values[0];
		float mSensorY = event.values[1];
		float mSensorZ = event.values[2];
		
		// TextView tv = (TextView) findViewById(R.id.accelerometer_values);
		
		// big loop for checking threshold begins here
		
		// 1) enter new accelerometer reading
		float accelValue = mSensorX*mSensorX + mSensorY*mSensorY + mSensorZ*mSensorZ
				/ (SensorManager.GRAVITY_EARTH * SensorManager.GRAVITY_EARTH);
		accel_data[currRecordInd] = accelValue;
		
		// 2) record accelerometer difference, then increment currRecordInd
		if(currRecordInd != 0 || cycle) { // if not the very first record
			accel_diff[currRecordInd - 1] = accel_data[currRecordInd] - accel_data[currRecordInd - 1]; 
		}
		currRecordInd = (currRecordInd + 1) % MAX_RECORDS;

		// 2b) check if cycle occurred
		if(currRecordInd == 0)
			cycle = true;
		
		
		// 3) update accel_count
		// check if in cycle, and if so if existing record is above or below DIFF_THRESHOLD as well
		float accelValueDiff = accelValue - accel_data[(currRecordInd + MAX_RECORDS - 1) % MAX_RECORDS];
		boolean newRecordTap = accelValueDiff > DIFF_THRESHOLD;
		if (newRecordTap) {
			if(cycle) {
				boolean oldRecordTap = accel_diff[currRecordInd] > DIFF_THRESHOLD;
				if(newRecordTap && !oldRecordTap) {
					
				}
				else if(!newRecordTap && oldRecordTap)
			}
				
			
			
		}	
		
		else {
			
		}
		
		// 4) check if accel_count threshold is met, if so switch activity
		if(accel_count >= NUM_ACCEL_THRESHOLD) {
			//Need to check if the "are you okay is already called"
			if (!isAYOActive){
				isAYOActive = true;
				// tv.setText(tv.getText() + "\n" + sensorMagnitude);
				Intent verification = new Intent(this, Verification.class);
		    	startActivity(verification);
				currRecordInd++; //Remove this line IF text of Accelerometer is different.
			}
		}
    }

    public void onSettingsButtonClick(View v) {  	
    	Intent settingsIntent = new Intent(this, SettingsActivity.class);
    	startActivity(settingsIntent);
    }
    
    @Override
    public boolean dispatchTouchEvent(MotionEvent event) { //Whenever ANYTHING is pressed!

    	if(ok != null)
    		ok.cancel();
    	
    	ok = new TimerTask()
    	{
			public void run()
			{
				int from = 100;
		    	int to = 601;
		    	Calendar c = Calendar.getInstance();
		    	int t = c.get(Calendar.HOUR_OF_DAY) * 100 + c.get(Calendar.MINUTE);
		    	if(t < from && t > to) {
		    		Intent notif = new Intent(MainActivity.this, Verification.class);
		    		startActivity(notif);
		    	}
		    	else onTouchEvent(null); //Resets timer if sleeping
			}
		};
		if(event == null) { //If sleeping, sets timer to 10:00am
			Calendar c = Calendar.getInstance();
			c.set(Calendar.HOUR_OF_DAY, 10);
			c.set(Calendar.MINUTE,0);
			c.set(Calendar.SECOND,0);
			checkImmobile.schedule(ok,c.getTime());	
		}
		else checkImmobile.schedule(ok,14400000); //4 Hours == 14400000
		

    	return super.dispatchTouchEvent(event);  //Allows event to continue propagating
    }
    
    /*
    @Override
	public boolean onTouchEvent(MotionEvent event) //Whenever anything is pressed
	{
    	if(ok != null)
    		ok.cancel();
    	
    	ok = new TimerTask()
    	{
			public void run()
			{
				int from = 100;
		    	int to = 601;
		    	Calendar c = Calendar.getInstance();
		    	int t = c.get(Calendar.HOUR_OF_DAY) * 100 + c.get(Calendar.MINUTE);
		    	if(t < from && t > to) {
		    		//Intent notif = new Intent(MainActivity.this, Verification.class);
		    		//startActivity(notif);
		    	}
		    	else onTouchEvent(null); //Resets timer if sleeping
			}
		};
		if(event == null) { //If sleeping, sets timer to 10:00am
			Calendar c = Calendar.getInstance();
			c.set(Calendar.HOUR_OF_DAY, 10);
			c.set(Calendar.MINUTE,0);
			c.set(Calendar.SECOND,0);
			checkImmobile.schedule(ok,c.getTime());	
		}
		else checkImmobile.schedule(ok,5000); //4 Hours == 14400000
		return false; //Allows event to continue propagating
	}
	*/
}
